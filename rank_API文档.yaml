swagger: "2.0"

info:
  version: "1"
  title: Rank miniProgram API
  description: a document of Rank miniProgram API

host: 127.0.0.1:6000
basePath: /v1
schemes:
  - https
  
consumes:
  - application/json
produces:
  - application/json

securityDefinitions:
   APIKeyHeader:
     type: apiKey
     in: header
     name: session

      
paths:
  /login/:
     post:
        tags:
          - auth
        summary: Using the code generated by wechat to login
        consumes:
          - application/x-www-form-urlencoded
        parameters: 
          - in: formData
            required: true
            name: code
            type: string
            description:  Response content of wx.login(Object object) to verify user's identity
        responses:
          200:
            description: OK, return user's information
            headers:
              Set-Cookie:
                type: string
                description: a string to save user's session 
                            like "session=afefw##q32"
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: user id
                openid:
                  type: string
                stdnum:
                  type: string
                department_id:
                  type: integer
                department_name:
                  type: string
                username:
                  type: string
                qq:
                  type: string
                show_stdnum:
                  type: boolean
                show_qq:
                  type: boolean
                booknum:
                  type: integer
                likes:
                  type: integer
          400:
            description: code Error
          401:
            description: Unauthorized, need to register 

  /check/:
    get:
      security: 
        - APIKeyHeader: []
      tags: 
        - auth
      summary: check user's login status

      responses:
        200:
          description: OK, valid user
        401:
          description: Unauthorized, invalid user
          
  /bind/:
    post:
      tags: 
        - auth
      summary: Bind stdnum and wechat
      consumes:
        - application/x-www-form-urlencoded
      parameters: 
        - in: formData
          required: true
          name: stdnum
          type: string
          
        - in: formData
          required: true
          name: password
          type: string
          
        - in: formData
          required: true
          name: code
          type: string
          description: wx.login
          
        - in: formData
          required: true
          name: username
          type: string
          description: Nickname of wechat
          
      responses:
        200:
          description: OK, binded, need to login
        400:
          description: Bad request
          schema:
            type: object
            properties:
              message:
                type: string
                description: 1. Username or password is wrong
                             2. Already registered

  /users/my/info/:
    put:
      security: 
        - APIKeyHeader: []
      tags:
        - user
      summary: Update my information
      consumes:
        - application/x-www-form-urlencoded
      parameters: 
        - in: formData
          name: qq
          type: string
          description: send this if user filled qq number
          
        - in: formData
          required: true
          name: show_stdnum
          type: boolean
          
        - in: formData
          required: true
          name: show_qq
          type: boolean
      
      responses:
        200:
          description: OK, update sucessfully
        400:
          description: this qq number has been used
        401:
          description: Unauthorized 
    get:
      security: 
        - APIKeyHeader: []
      tags: 
        - user
      summary: Get my information
      responses:
        200:
          description: OK, return my information
          schema:
            type: object
            properties:
              id:
                type: integer
                description: user id
              stdnum:
                type: string
              department_id:
                type: integer
              department_name:
                type: string
              username:
                type: string
              qq:
                type: string
              show_stdnum:
                type: boolean
              show_qq:
                type: boolean
              booknum:
                type: integer
              likes:
                type: integer
      
  /users/{id}/info/:
    get:
      tags: 
        - user
      summary: Get user's information
      parameters: 
        - in: path
          name: id
          required: true
          type: integer
          
      responses:
        200:
          description: OK, return user's information
          schema:
            type: object
            properties:
              id:
                type: integer
                description: user id
              stdnum:
                type: string
              openid:
                type: string
              username:
                type: string
              qq:
                type: string
              booknum:
                type: integer
              likes:
                type: integer
              step:
                type: integer
                description: today's step
        
        400:
          description: User does not exist
          

      
  /rank/lib:
    get:
      tags: 
        - rank
      summary: Get library rank, return a list
      parameters: 
        - in: query
          name: offset
          type: integer
          description: from which position to start
          default: 0
        - in: query
          name: limit
          type: integer
          description: length of the ranking list
          default: 10
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              type: object
              properties:
                booknum:
                  type: integer
                user_id:
                  type: integer
                username:
                  type: string
                likes:
                  type: integer

  /rank/step/person:
    get:
      tags: 
        - rank
      summary: Get step rank, return a list
      parameters: 
        - in: query
          name: offset
          type: integer
          description: from which position to start
          default: 0
        - in: query
          name: limit
          type: integer
          description: length of the ranking list
          default: 10
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              type: object
              properties:
                step:
                  type: integer
                user_id:
                  type: integer
                username:
                  type: string
                likes:
                  type: integer
                  
  /rank/step/dept/today:
    get:
      tags: 
        - rank
      summary: Get step rank, return a list
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              type: object
              properties:
                step:
                  type: integer
                department_id:
                  type: integer
                department_name:
                  type: string
                likes:
                  type: integer
                count:
                  type: integer
                  
  /rank/step/dept/week:
    get:
      tags: 
        - rank
      summary: Get step rank, return a list
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              type: object
              properties:
                step:
                  type: integer
                department_id:
                  type: integer
                department_name:
                  type: string
                likes:
                  type: integer
                count:
                  type: integer
                  
  /rank/step/dept/month:
    get:
      tags: 
        - rank
      summary: Get step rank, return a list
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              type: object
              properties:
                step:
                  type: integer
                department_id:
                  type: integer
                department_name:
                  type: string
                likes:
                  type: integer
                count:
                  type: integer
                  
  /werun/:
    get:
      summary: Get my werun data
      security:
        - APIKeyHeader: []
      tags: 
        - werun
      parameters: 
        - in: query
          name: start
          type: string
          description: from which date to start
          default: YYYY-MM-DD
        - in: query
          name: end
          type: string
          description: from which date to end
          default: YYYY-MM-DD
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              type: object
              properties:
                time:
                  type: string
                step:
                  type: integer
        401:
          description: Unauthorized 
    post:
      summary: Update my werun data
      tags: 
        - werun
      security: 
        - APIKeyHeader: []
      consumes:
        - application/json
      parameters:
        - in: body
          name: array
          description: information from wx.getWeRunData()
          schema:
            type: array
            items:
              type: object
              properties:
                timestamp:
                  type: string
                step:
                  type: integer
      responses:
        200:
          description: Created
        401:
          description: Unauthorized 
  /likes/:
    get:
      tags: 
        - like
      security: 
        - APIKeyHeader: []
      summary: Get my likes
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              type: object
              properties:
                rank:
                  type: integer
                  description: type of rank
                star_id:
                  type: integer
        401:
          description: Unauthorized 
          
    post:
      tags: 
        - like
      security: 
        - APIKeyHeader: []
      summary: Add new like 
      consumes: 
        - application/x-www-form-urlencoded
      parameters: 
        - in: formData
          name: star_id
          type: integer
        - in: formData
          name: type
          type: integer
      responses:
        200:
          description: OK
        400:
          description: Already liked
        401:
          description: Unauthorized 
          
    delete:
      tags: 
        - like
      security: 
        - APIKeyHeader: []
      summary: Unlike
      consumes: 
        - application/x-www-form-urlencoded
      parameters: 
        - in: formData
          name: star_id
          type: integer
        - in: formData
          name: type
          type: integer
      responses:
        200:
          description: OK
        400:
          description: Already unliked
        401:
          description: Unauthorized 
    
    
  /suggestions/:
    post:
      security: 
        - APIKeyHeader: []
      tags: 
        - others
      summary: Add a suggestion
      consumes: 
        - application/x-www-form-urlencoded
      parameters: 
        - in: formData
          name: contact
          type: string
        - in: formData
          name: content
          type: string
          
      responses:
        200:
          description: OK
        401:
          description: Unauthorized 
          

        
    
      
        